# 90-Day **Day-by-Day** AI + Cloud Checklist — exact tasks + learning links

Love this — you asked me to *deep think*, so I designed a **practical, brutal-clarity daily checklist** you can follow for 90 days (≈3 hours/day minimum). It’s project-driven: every week moves theory → code → deploy → interview practice. Follow it strictly, ship the projects, and apply aggressively at the end of the sprint.

### Key notes before you start

* Minimum: **3 hours/day** (learning 1 hr, building 1.5 hr, practice/apply 0.5 hr). More is better.
* Focus: **AI + Cloud (Python + FastAPI + Embeddings + Vector DB + AWS + Docker + CI/CD)** — these get attention and pay.
* I included direct links to authoritative docs you’ll use daily. Open these and keep them as your canonical references.

### Primary resources (open these and bookmark)

* OpenAI Embeddings & API docs. ([OpenAI Platform][1])
* LangChain (RAG & orchestration for LLM apps). ([LangChain][2], [GitHub][3])
* FastAPI (backend + auto API docs). ([FastAPI][4])
* Pinecone (managed vector DB quickstart) — useful for production RAG. ([Pinecone Docs][5])
* AWS docs (EC2 / Lambda / serverless guidance). ([AWS Documentation][6])
* Docker (containerize everything). ([Docker Documentation][7])
* GitHub Actions (CI/CD). ([GitHub Docs][8])
* scikit-learn, pandas, numpy (ML & data work). ([Scikit-learn][9], [Pandas][10], [NumPy][11])
* FAISS (local vector search option). ([LangChain][12])
* Python official tutorial & LeetCode for algorithm practice. ([Python documentation][13], [LeetCode][14])

---

## How to use this checklist

1. Work **day-by-day** only; don’t skip days — momentum is your money.
2. Commit work to GitHub daily. Each week end — push a live-ish demo or at least a README + screenshots.
3. If a day requests a “project task,” treat it as the priority. Theory comes in short bursts.
4. When you see “deliverable” — make it demoable (video 2–3 min or deploy link).
5. Tell me which project you choose first (I recommended **AI PDF Q\&A**). I can scaffold repo + CI for you instantly.

---

## Day-by-day plan (Days 1 → 90)

### PHASE 1 — Foundations & first AI projects (Days 1–30)

Week 1 — Python fundamentals & small CLI demo

1. Day 1 — Python quick tour: types, variables, REPL. Read Python tutorial intro. ([Python documentation][13])
2. Day 2 — Lists/tuples/dicts/sets + small exercises.
3. Day 3 — Functions, args, return, scope.
4. Day 4 — OOP basics: classes, `__init__`, simple model class.
5. Day 5 — File I/O + CSV/JSON read/write (use your GST CSV example).
6. Day 6 — Virtualenv / pip / project layout. Create `venv` + `requirements.txt`.
7. Day 7 — Deliverable: CLI tool that reads a CSV and prints summary stats (push to GitHub).

Week 2 — NumPy + Pandas (data work)
8\. Day 8 — NumPy quickstart (arrays, shapes). ([NumPy][11])
9\. Day 9 — Pandas read CSV, DataFrame basics. ([Pandas][10])
10\. Day 10 — Data cleaning: missing values, types, conversions.
11\. Day 11 — Aggregations, groupby, merges.
12\. Day 12 — Visualization basics (matplotlib) — plot revenue/time series.
13\. Day 13 — Deliverable: exploratory notebook analyzing sample fintech data.
14\. Day 14 — GitHub commit, README describing findings.

Week 3 — ML basics (scikit-learn)
15\. Day 15 — ML concepts: train/test split, metrics. ([Scikit-learn][9])
16\. Day 16 — Linear regression example (scikit-learn).
17\. Day 17 — Classification basics: logistic regression, k-NN.
18\. Day 18 — Trees & random forest; model evaluation (precision/recall).
19\. Day 19 — Save/load model (joblib), build scoring function.
20\. Day 20 — Deliverable: simple classifier on synthetic fintech labels (flag suspicious).
21\. Day 21 — Small writeup + commit.

Week 4 — LLM basics & RAG foundations (OpenAI + LangChain)
22\. Day 22 — Read OpenAI embeddings guide & create a test embedding request. ([OpenAI Platform][1])
23\. Day 23 — LangChain basics: Document objects & simple chain. ([LangChain][2])
24\. Day 24 — Build small script: chunk a text file → embed → store in a list.
25\. Day 25 — Wire a minimal FastAPI endpoint `POST /ask` that returns mock answers. (Read FastAPI quickstart.) ([FastAPI][4])
26\. Day 26 — Integrate real embeddings + simple cosine similarity search (FAISS or naive). ([LangChain][12])
27\. Day 27 — Deliverable: local RAG pipeline that answers a question from a document.
28\. Day 28 — Polish README + demo GIF.

**Goal by Day 30:** two small deliverables (CSV CLI + RAG demo) in GitHub.

---

### PHASE 2 — Cloud, containers & deployments (Days 31–60)

Week 5 — FastAPI + Docker + simple frontend hooks
29\. Day 29 — Build a FastAPI project skeleton (routes: `/upload`, `/ask`, `/health`). ([FastAPI][4])
30\. Day 30 — Dockerize FastAPI (`Dockerfile`) and run locally. ([Docker Documentation][7])
31\. Day 31 — Create minimal React UI (upload + question form). (Use React docs.) ([React][15])
32\. Day 32 — Connect React → FastAPI locally (CORS, proxy).
33\. Day 33 — Add embeddings flow: store vectors in local FAISS index. ([LangChain][12])
34\. Day 34 — Deliverable: containerized RAG app that runs locally via `docker-compose`.
35\. Day 35 — GitHub push + simple GitHub Actions CI that lints/tests. ([GitHub Docs][8])

Week 6 — AWS EC2 & S3 (deploy classic stack)
36\. Day 36 — AWS intro + IAM basics — create an AWS free-tier account if you don’t have one. ([AWS Documentation][16])
37\. Day 37 — Launch EC2 instance; SSH in; install Docker. ([AWS Documentation][6])
38\. Day 38 — Deploy your Dockerized app to EC2; test publicly.
39\. Day 39 — Use S3 for storing uploaded PDFs/files; switch from local FS. ([AWS Documentation][16])
40\. Day 40 — Add environment variables + secrets handling (AWS Secrets Manager or `.env` for now).
41\. Day 41 — Add basic CloudWatch logs / monitoring for the instance. ([AWS Documentation][16])
42\. Day 42 — Deliverable: live EC2 deployment demo link + short deploy steps in README.

Week 7 — Docker Compose / ECS intro / CI/CD
43\. Day 43 — Learn Docker Compose multi-service orchestration. ([Docker Documentation][17])
44\. Day 44 — Migrate local `docker-compose` to produce image builds in CI.
45\. Day 45 — Create GitHub Actions workflow: build → test → push to DockerHub/ECR. ([GitHub Docs][8])
46\. Day 46 — Read about ECS vs EC2; decide deploy path (ECS recommended for containers). ([AWS Documentation][16])
47\. Day 47 — Optional: push images to ECR; prepare ECS task definition.
48\. Day 48 — Deliverable: CI pipeline that builds & pushes your container image.

Week 8 — Serverless & Lambda patterns
49\. Day 49 — Read AWS Lambda concepts (serverless model). ([AWS Documentation][18])
50\. Day 50 — Create a small Lambda function that proxies to OpenAI (or acts as a cost/latency control).
51\. Day 51 — Integrate API Gateway → Lambda (test low-latency small calls).
52\. Day 52 — Store small metadata in DynamoDB (user sessions).
53\. Day 53 — Add a scheduled job (CloudWatch Event / Lambda) for maintenance (e.g., rebuild embeddings).
54\. Day 54 — Deliverable: serverless endpoint demo for light AI calls.

**Goal by Day 60:** at least one project deployed (EC2 or serverless) + CI pipeline working.

---

### PHASE 3 — Advanced AI, system design & job hunt (Days 61–90)

Week 9 — Embeddings & vector DB production (Pinecone / FAISS)
55\. Day 55 — Read Pinecone quickstart and create a free account; test creating an index. ([Pinecone Docs][19])
56\. Day 56 — Migrate your vector store from FAISS → Pinecone (or add Pinecone as prod option).
57\. Day 57 — Add metadata filtering (per user, per doc) in your vector queries.
58\. Day 58 — Embed batch upload: script to process multiple PDFs and index. ([OpenAI Platform][1])
59\. Day 59 — Add top-k scoring and answer confidence to API responses.
60\. Day 60 — Deliverable: production-grade vector index + API.

Week 10 — Advanced AI features (fine-tuning, embeddings improvements)
61\. Day 61 — Learn embeddings strategies (chunk size, overlap, model choice). ([OpenAI Platform][20])
62\. Day 62 — Implement embedding caching & batching to save API calls.
63\. Day 63 — Add an explanation layer (show source passages with citations).
64\. Day 64 — Experiment with small fine-tune or prompt-engineering patterns (if budget permits).
65\. Day 65 — Add session memory & chat history (link to user context).
66\. Day 66 — Deliverable: polished AI Q\&A with citations + memory.

Week 11 — System design & scaling (interview prep)
67\. Day 67 — Study system design basics: scaling, caching, queues. (Read short notes / sketch diagrams.)
68\. Day 68 — Add Redis cache for frequent queries; show TTL logic.
69\. Day 69 — Add a queue (SQS/RabbitMQ) for long-running jobs (e.g., embedding ingestion).
70\. Day 70 — Create a simple autoscaling test (load simulation) or document the plan.
71\. Day 71 — Mock system design interview: prepare diagrams for your app.
72\. Day 72 — Deliverable: system-design doc (2 pages) + architecture diagrams.

Week 12 — Final polish, portfolio & aggressive apply
73\. Day 73 — Make 2–3 short demo videos (2–3 min) showing each project. Host on GitHub Pages or YouTube.
74\. Day 74 — Resume: add AI + Cloud projects, metrics (latency, users processed). I can rewrite it.
75\. Day 75 — LinkedIn revamp: headline, 2-line summary, project links.
76\. Day 76 — Prepare 20 tailored application messages (I can draft these).
77\. Day 77 — Start targeted applications: product companies, remote USD roles, freelancing platforms. ([LeetCode][14])
78\. Day 78 — DSA refresh: Blind75 problems — 1 easy + 1 medium daily on LeetCode. ([LeetCode][14])
79\. Day 79 — System design mocks with a peer / Pramp.
80\. Day 80 — Behavioral interview prep + STAR answers for 6 common questions.
81\. Day 81 — Negotiate mock scenarios: salary target ₹10–15 LPA or \$40–60/hr contract.
82\. Day 82 — Continue applying; follow up on earlier apps.
83\. Day 83 — Run final QA: security review, secrets removed from repos.
84\. Day 84 — Deliverable: polished portfolio site + 4 project demos + resume.

Final push (Days 85–90) — interviews & close
85\. Day 85 — Sit live interviews (schedule 2–3 in this window).
86\. Day 86 — Iterate on feedback; patch code or docs fast.
87\. Day 87 — Final negotiation: sign offers or accept short USD contract for cashflow.
88\. Day 88 — If no offers, double down on freelance gigs for immediate cash (Upwork/Toptal). ([Pinecone Docs][19])
89\. Day 89 — Plan first 90 days at new job: onboarding checklist.
90\. Day 90 — Celebrate & lock next goals: build your startup MVP plan (you said entrepreneur). 🎉

---

## Little tactical tips (short & sharp)

* **Recording demos**: Use Loom or your phone — 2 minutes showing features + how to run locally. Recruiters love quick demo.
* **Budget control**: Use local FAISS in dev, Pinecone for prod tests; keep API calls minimal (cache embeddings). ([LangChain][12], [Pinecone Docs][5])
* **Interview ammo**: quantify everything — “reduced query latency by 40%,” “processed 1k docs,” etc.
* **Immediate income**: while building, offer “fix React bug / small API” gigs on Upwork — deliver 48–72 hours. It pays fast.

---

If you want I will:

* Scaffold the **AI PDF Q\&A** starter repo (React + FastAPI + FAISS + Docker + GitHub Actions) right now — with ready `Dockerfile`, `.env.example`, CI, and README.
* Or I can **convert this 90-day plan into a daily checklist file** (Google Sheets / Markdown) so you can check off tasks each day.

Which do you want me to do **right now**? (1) Scaffold AI PDF Q\&A repo, or (2) Export this checklist as a daily tracker file you can tick off?

[1]: https://platform.openai.com/docs/guides/embeddings?utm_source=chatgpt.com "Vector embeddings - OpenAI API"
[2]: https://python.langchain.com/docs/introduction/?utm_source=chatgpt.com "Introduction | 🦜️ LangChain"
[3]: https://github.com/langchain-ai/langchain?utm_source=chatgpt.com "langchain-ai/langchain: Build context-aware reasoning applications"
[4]: https://fastapi.tiangolo.com/?utm_source=chatgpt.com "FastAPI"
[5]: https://docs.pinecone.io/?utm_source=chatgpt.com "Pinecone Docs: Pinecone Database"
[6]: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html?utm_source=chatgpt.com "Get started with Amazon EC2 - Amazon Elastic Compute Cloud"
[7]: https://docs.docker.com/get-started/?utm_source=chatgpt.com "Get started - Docker Docs"
[8]: https://docs.github.com/en/actions/get-started/quickstart?utm_source=chatgpt.com "Quickstart for GitHub Actions"
[9]: https://scikit-learn.org/1.4/tutorial/index.html?utm_source=chatgpt.com "scikit-learn Tutorials — scikit-learn 1.4.2 documentation"
[10]: https://pandas.pydata.org/docs/getting_started/intro_tutorials/?utm_source=chatgpt.com "Getting started tutorials — pandas 2.3.1 documentation - PyData |"
[11]: https://numpy.org/doc/stable/user/?utm_source=chatgpt.com "NumPy user guide"
[12]: https://python.langchain.com/docs/integrations/vectorstores/faiss/?utm_source=chatgpt.com "Faiss | 🦜️ LangChain"
[13]: https://docs.python.org/3/tutorial/index.html?utm_source=chatgpt.com "The Python Tutorial — Python 3.13.6 documentation"
[14]: https://leetcode.com/problemset/?utm_source=chatgpt.com "The World's Leading Online Programming Learning ... - LeetCode"
[15]: https://react.dev/learn?utm_source=chatgpt.com "Quick Start - React"
[16]: https://docs.aws.amazon.com/?utm_source=chatgpt.com "Welcome to AWS Documentation"
[17]: https://docs.docker.com/compose/gettingstarted/?utm_source=chatgpt.com "Docker Compose Quickstart"
[18]: https://docs.aws.amazon.com/lambda/?utm_source=chatgpt.com "AWS Lambda Documentation"
[19]: https://docs.pinecone.io/guides/get-started/quickstart?utm_source=chatgpt.com "Quickstart - Pinecone Docs"
[20]: https://platform.openai.com/docs/guides/embeddings/what-are-embeddings?utm_source=chatgpt.com "OpenAI Embeddings API"

